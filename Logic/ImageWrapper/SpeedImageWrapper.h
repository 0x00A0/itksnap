/*=========================================================================

  Program:   ITK-SNAP
  Module:    $RCSfile: SpeedImageWrapper.h,v $
  Language:  C++
  Date:      $Date: 2009/08/25 21:38:16 $
  Version:   $Revision: 1.5 $
  Copyright (c) 2007 Paul A. Yushkevich
  
  This file is part of ITK-SNAP 

  ITK-SNAP is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.

  -----

  Copyright (c) 2003 Insight Software Consortium. All rights reserved.
  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notices for more information. 

=========================================================================*/
#ifndef __SpeedImageWrapper_h_
#define __SpeedImageWrapper_h_

#include "GreyImageWrapper.h"
#include <itkSimpleDataObjectDecorator.h>

// #include "SpeedColorMap.h"

// Forward references to ITK
namespace itk {
  template <class TInput,class TOutput,class TFunctor> 
    class UnaryFunctorImageFilter;
  template <class TOutput> class ImageSource;
};

// Disable 'inheritance by dominance' warining in VC6
#if defined(_WIN32) && defined(_MSC_VER)
  #pragma warning (disable: 4250)
#endif

/**
  \class SpeedImageWrapper
  \brief Image wraper for speed images in SNAP

  Speed images are generated by preprocessing operations. They have
  intensity values in the range -1 to 1, but are internally stored as
  images of type short int.

  \sa ImageWrapper
 */
class SpeedImageWrapper : public GreyImageWrapper< itk::Image<short, 3> >
{
public:

  // Standard ITK business
  typedef SpeedImageWrapper                                               Self;
  typedef GreyImageWrapper< itk::Image<short, 3> >                  Superclass;
  typedef SmartPtr<Self>                                               Pointer;
  typedef SmartPtr<const Self>                                    ConstPointer;
  itkTypeMacro(SpeedImageWrapper, GreyImageWrapper)
  itkNewMacro(Self)

  // Basics
  typedef Superclass::ImageType ImageType;

  /**
   * Indicate that this image is a In/Out speed image that has a
   * range of -1 to +1.
   */
  void SetModeToInsideOutsideSnake()
    {
    m_IsModeInsideOutside = true;
    }

  /**
   * Indicate that this image is a Edge speed image that has a
   * range of 0 to 1.
   */
  void SetModeToEdgeSnake()
    {
    m_IsModeInsideOutside = false;
    }

  /**
   * Check if the image is in the Inside/Outside or Edge mode
   */
  bool IsModeInsideOutsideSnake() const
    {
    return m_IsModeInsideOutside;
    }

  /**
   * Check if the image is in the Inside/Outside or Edge mode
   */
  bool IsModeEdgeOutsideSnake() const
    {
    return !m_IsModeInsideOutside;
    }

protected:

  /** Constructor initializes mappers */
  SpeedImageWrapper();

  /** Destructor */
  ~SpeedImageWrapper();

  /** Whether or not the image is in edge or in-out mode */
  bool m_IsModeInsideOutside;
};

#endif // __SpeedImageWrapper_h_
